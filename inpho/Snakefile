
checkpoint fetch_owl_files:
#Â Scrape the InPho website to fetch the necessary OWL files
    output:
        directory("owls")
    conda:
        "envs/fetch_owl.yaml"
    script:
        "scripts/fetch_owl.py"

def aggregate_input(wildcards):
    checkpoint_output = checkpoints.fetch_owl_files.get(**wildcards).output[0]
    return expand("owls/{i}.owl",
           i=glob_wildcards(os.path.join(checkpoint_output, "{i}.owl")).i)

rule aggregate_owl_files:
# Combine OWL files into one
    input:
        aggregate_input
    output:
        "inpho.owl"
    conda:
        "envs/owlready2.yaml"
    script:
        "scripts/aggregate_owl.py"

rule get_influence_network:
    input:
        "inpho.owl"
    output:
        "inpho.tsv"
    conda:
        "envs/owlready2.yaml"
    script:
        "scripts/get_influence_network.py"

rule visualise_and_export_network:
    input:
        "inpho.tsv"
    output:
        html="inpho.html",
        network="inpho.graphml"
    conda:
        "envs/network.yaml"
    script:
        "scripts/visualise_and_export_network.R"
